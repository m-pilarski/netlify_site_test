.hdata_tbl <<- base::simpleError(..error$message)
}
}
}, finally=function(...){
base::gc()
})
}
return(.hdata_tbl)
}
stock_hdata_db <- read_rds("./data/stock_hdata_db.Rds")
stock_hdata_db %>%
pluck("hdata") %>%
keep(is, "error") %>%
map_chr("message") %>%
as_tibble_col("error_message") %>%
count(error_message, sort=TRUE)
# .yahoo_symbol <- "SAP"
get_yahoo_profile <- function(.yahoo_symbol){
.profile_url <- ""
.profile_dl_status <- NULL
.profile_tbl <- NULL
while(is(.profile_tbl, "NULL")){
tryCatch({
.profile_url <- glue::glue(stringr::str_c(
"https://finance.yahoo.com/quote/{.yahoo_symbol}/profile",
"?p={.yahoo_symbol}"
))
.profile_dl <- httr::GET(.profile_url, httr::timeout(10))
.profile_dl_status <- purrr::prepend(
httr::http_status(.profile_dl),
base::list(status_code = .profile_dl$status_code)
)
if(.profile_dl_status$category=="Success"){
.profile_lines <-
.profile_dl %>%
xml2::read_html() %>%
rvest::html_elements(".asset-profile-container") %>%
rvest::html_text2() %>%
str_split("\n\n") %>%
flatten_chr() %>%
str_split("\n") %>%
map(str_squish) %>%
as_tibble_col(column_name="par") %>%
rowid_to_column(var="par_id") %>%
unnest_longer(par, values_to="value", indices_to="row_id") %>%
select(par_id, row_id, value)
.profile_data <- list()
# extract company name
.profile_lines <- anti_join(
.profile_lines,
.profile_data$name <- filter(.profile_lines, par_id == 1)
)
# extract company url
.profile_lines <- anti_join(
.profile_lines,
.profile_data$url <- filter(
.profile_lines, str_detect(value, "^https?:")
)
)
# extract company address
.profile_lines <- anti_join(
.profile_lines,
.profile_data$address <- filter(.profile_lines, par_id == 2)
)
# extract company info
.profile_lines <- anti_join(
.profile_lines,
.profile_data$info <- filter(.profile_lines, par_id == max(par_id))
)
.profile_data$rest <- .profile_lines
.profile_tbl <- .profile_data
}else{
stop(stringr::str_c(
"profile lookup for symbol \"", .yahoo_symbol, "\" failed with ",
"status-message \"", .profile_dl_status$message, "\""
))
}
}, error=function(..error){
..error_is_solvable_retry <- any(
stringr::str_detect(..error$message, "\\bTimeout was reached\\b"),
base::isTRUE(.profile_dl_status$status_code == 401)
)
if(..error_is_solvable_retry){
.profile_tbl <<- NULL
httr::handle_reset(.profile_url)
base::Sys.sleep(10)
}else{
if(!is.null(.profile_dl_status$message)){
.profile_tbl <<- base::simpleError(.profile_dl_status$message)
}else{
.profile_tbl <<- base::simpleError(..error$message)
}
}
}, finally=function(...){
base::gc()
})
}
return(.profile_tbl)
}
# stock_profile_db <- read_rds("./data/stock_profile_db.Rds")
stock_profile_db <-
instrument_db %>%
filter(instrument_type == "CS") %>%
# slice_sample(n=100) %>%
mutate(profile=best_map(
str_c(mnemonic, ".F"), get_yahoo_profile, .workers=20, .scheduling=5
)) %>%
write_rds("./data/stock_profile_db.Rds")
stock_hdata_db <-
instrument_db %>%
filter(instrument_type == "CS") %>%
# slice_sample(n=10) %>%
mutate(hdata=best_map(
.x=str_c(mnemonic, ".F"), .f=get_yahoo_hdata, .workers=10, .scheduling=10
)) %>%
write_rds("./data/stock_hdata_db.Rds")
.profile_lines <-
.profile_dl %>%
xml2::read_html() %>%
rvest::html_elements(".asset-profile-container") %>%
rvest::html_text2() %>%
str_split("\n\n") %>%
flatten_chr() %>%
str_split("\n") %>%
map(str_squish) %>%
as_tibble_col(column_name="par") %>%
rowid_to_column(var="par_id") %>%
unnest_longer(par, values_to="value", indices_to="row_id") %>%
select(par_id, row_id, value)
setwd("~/Documents/stock_market")
library(tidyverse)
library(stringi)
library(glue)
source("./resources/best_map.R")
data_dir <- fs::dir_create("~/Documents/stock_market/data")
temp_dir <- fs::dir_create(fs::path(data_dir, "temp"))
################################################################################
################################################################################
################################################################################
get_XFRA_instrument_db <- function(){
.exchange_meta_zip_file <-
fs::file_temp(tmp_dir=temp_dir, ext="zip")
.exchange_meta_zip_dir <-
fs::dir_create(fs::path_ext_remove(.exchange_meta_zip_file))
.exchange_meta_dl <- httr::GET(
"https://www.xetra.com/xetra-en/t7-xfra-BF-allTradableInstruments.zip",
httr::timeout(30)
)
base::writeBin(
object=httr::content(.exchange_meta_dl, as="raw"),
con=.exchange_meta_zip_file
)
utils::unzip(zipfile=.exchange_meta_zip_file, exdir=.exchange_meta_zip_dir)
.exchange_meta_csv_file <- fs::dir_ls(
.exchange_meta_zip_dir, regexp="(?i)\\.csv$"
)
stopifnot(length(.exchange_meta_csv_file) == 1)
.exchange_meta <- readr::read_delim(
.exchange_meta_csv_file, delim=";", skip=2,
progress=FALSE, show_col_types=FALSE,
name_repair=janitor::make_clean_names,
col_select=c(mic_code, instrument_type, instrument, isin, mnemonic)
)
# .exchange_meta %>% slice_sample(n=1e3) %>% view()
fs::file_delete(.exchange_meta_zip_file)
fs::dir_delete(.exchange_meta_zip_dir)
base::gc()
return(.exchange_meta)
}
################################################################################
instrument_db <- get_XFRA_instrument_db()
instrument_db
instrument_db %>%
filter(instrument_type == "CS")
stock_profile <-
stock_profile_db %>%
select(mnemonic, profile) %>%
mutate(profile = map(profile, function(.profile){
if(!is(.profile, "list")){return(NULL)}
.profile <<- .profile
.profile_df <- imap_dfc(.profile, function(..values, ..name){
..values <<- ..values; ..name <<- ..name
if(nrow(..values) == 0){return(tibble(.rows=1))}
if(..name %in% c("name", "url", "address")){
..values <-
..values %>%
pluck("value", .default=character()) %>%
str_c(collapse=" | ") %>%
as_tibble_col(column_name=..name)
}else if(..name %in% c("info")){
..values <-
..values %>%
select(value) %>%
separate(col=value, into=c("name", "value"), remove=TRUE, sep=": ") %>%
mutate(across(where(is.character), str_remove, "\\(.*?\\)")) %>%
mutate(across(where(is.character), str_squish)) %>%
pivot_wider(names_from=name, values_from=value,
names_repair=janitor::make_clean_names)
}else if(..name %in% c("rest")){
..values <- as_tibble_col(list(..values), column_name=..name)
}else{
stop()
}
return(..values)
})
return(.profile_df)
}))
setwd("~/Documents/stock_market")
library(tidyverse)
library(stringi)
library(glue)
source("./resources/best_map.R")
data_dir <- fs::dir_create("~/Documents/stock_market/data")
temp_dir <- fs::dir_create(fs::path(data_dir, "temp"))
################################################################################
################################################################################
################################################################################
get_XFRA_instrument_db <- function(){
.exchange_meta_zip_file <-
fs::file_temp(tmp_dir=temp_dir, ext="zip")
.exchange_meta_zip_dir <-
fs::dir_create(fs::path_ext_remove(.exchange_meta_zip_file))
.exchange_meta_dl <- httr::GET(
"https://www.xetra.com/xetra-en/t7-xfra-BF-allTradableInstruments.zip",
httr::timeout(30)
)
base::writeBin(
object=httr::content(.exchange_meta_dl, as="raw"),
con=.exchange_meta_zip_file
)
utils::unzip(zipfile=.exchange_meta_zip_file, exdir=.exchange_meta_zip_dir)
.exchange_meta_csv_file <- fs::dir_ls(
.exchange_meta_zip_dir, regexp="(?i)\\.csv$"
)
stopifnot(length(.exchange_meta_csv_file) == 1)
.exchange_meta <- readr::read_delim(
.exchange_meta_csv_file, delim=";", skip=2,
progress=FALSE, show_col_types=FALSE,
name_repair=janitor::make_clean_names,
col_select=c(mic_code, instrument_type, instrument, isin, mnemonic)
)
# .exchange_meta %>% slice_sample(n=1e3) %>% view()
fs::file_delete(.exchange_meta_zip_file)
fs::dir_delete(.exchange_meta_zip_dir)
base::gc()
return(.exchange_meta)
}
################################################################################
instrument_db <- get_XFRA_instrument_db()
################################################################################
################################################################################
################################################################################
# .yahoo_symbol <- "SAP"
get_yahoo_hdata <- function(.yahoo_symbol){
.hdata_dl_status <- NULL
.hdata_tbl <- NULL
.hdata_url <- ""
while(is(.hdata_tbl, "NULL")){
tryCatch({
.hdata_date_end <- lubridate::now(tzone="UTC")
.hdata_date_start <- .hdata_date_end - lubridate::years(1)
.hdata_url <- glue::glue(stringr::str_c(
"https://query1.finance.yahoo.com/v7/finance/download/",
"{.yahoo_symbol}",
"?period1={as.integer(.hdata_date_start)}",
"&period2={as.integer(.hdata_date_end)}",
"&interval=1d",
"&events=history",
"&includeAdjustedClose=true"
))
.hdata_dl <- httr::GET(.hdata_url, httr::timeout(10))
.hdata_dl_status <- purrr::prepend(
httr::http_status(.hdata_dl),
base::list(status_code = .hdata_dl$status_code)
)
if(.hdata_dl_status$category=="Success"){
.hdata_tbl <-
.hdata_dl %>%
httr::content(as="raw") %>%
readr::read_csv(
col_types=readr::cols(
date=readr::col_date(), .default=readr::col_double()
),
show_col_types=FALSE, progress=FALSE,
name_repair=janitor::make_clean_names
) %>%
tibble::add_column(yahoo_symbol=.yahoo_symbol, .after=0)
}else{
stop(stringr::str_c(
"download for symbol \"", .yahoo_symbol, "\" failed with status-",
"message \"", .hdata_dl_status$message, "\""
))
}
}, error=function(..error){
..error_is_solvable_retry <- any(
stringr::str_detect(..error$message, "\\bTimeout was reached\\b"),
base::isTRUE(.hdata_dl_status$status_code == 401)
)
if(..error_is_solvable_retry){
.hdata_tbl <<- NULL
httr::handle_reset(.hdata_url)
base::Sys.sleep(10)
}else{
if(!is.null(.hdata_dl_status$message)){
.hdata_tbl <<- base::simpleError(.hdata_dl_status$message)
}else{
.hdata_tbl <<- base::simpleError(..error$message)
}
}
}, finally=function(...){
base::gc()
})
}
return(.hdata_tbl)
}
################################################################################
stock_hdata_db <- read_rds("./data/stock_hdata_db.Rds")
# stock_hdata_db <-
#   instrument_db %>%
#   filter(instrument_type == "CS") %>%
#   # slice_sample(n=10) %>%
#   mutate(hdata=best_map(
#     .x=str_c(mnemonic, ".F"), .f=get_yahoo_hdata, .workers=6, .scheduling=10
#   )) %>%
#   write_rds("./data/stock_hdata_db.Rds")
stock_hdata_db %>%
pluck("hdata") %>%
keep(is, "error") %>%
map_chr("message") %>%
as_tibble_col("error_message") %>%
count(error_message, sort=TRUE)
################################################################################
################################################################################
################################################################################
.yahoo_symbol <- "S2K1.F" # "SAP"
get_yahoo_profile <- function(.yahoo_symbol){
.profile_url <- ""
.profile_dl_status <- NULL
.profile_tbl <- NULL
while(is.null(.profile_tbl)){
tryCatch({
.profile_url <- glue::glue(stringr::str_c(
"https://finance.yahoo.com/quote/{.yahoo_symbol}/profile",
"?p={.yahoo_symbol}"
))
.profile_dl <- httr::GET(.profile_url, httr::timeout(10))
.profile_dl_status <- purrr::prepend(
httr::http_status(.profile_dl),
base::list(status_code = .profile_dl$status_code)
)
if(.profile_dl_status$category=="Success"){
.profile_html_element <- rvest::html_elements(
xml2::read_html(.profile_dl), ".asset-profile-container"
)
if(length(.profile_html_element)>0){
.profile_struct <-
.profile_html_element %>%
rvest::html_text2() %>%
str_split("\n\n") %>%
flatten_chr() %>%
str_split("\n") %>%
map(str_squish) %>%
as_tibble_col(column_name="par") %>%
rowid_to_column(var="par_id") %>%
unnest_longer(par, values_to="value", indices_to="row_id") %>%
select(par_id, row_id, value)
}else{
.profile_struct <- tibble(
par_id=integer(), row_id=integer(), value=character()
)
}
.profile_data <- list()
# extract company name
.profile_struct <- anti_join(
.profile_struct,
.profile_data$name <- filter(.profile_struct, par_id == 1)
)
# extract company url
.profile_struct <- anti_join(
.profile_struct,
.profile_data$url <- filter(
.profile_struct, str_detect(value, "^https?:")
)
)
# extract company address
.profile_struct <- anti_join(
.profile_struct,
.profile_data$address <- filter(.profile_struct, par_id == 2)
)
# extract company info
.profile_struct <- anti_join(
.profile_struct,
.profile_data$info <- slice_max(
.profile_struct, par_id, n=1, with_ties=TRUE
)
)
.profile_data$rest <- .profile_struct
.profile_tbl <- .profile_data
}else{
stop(stringr::str_c(
"profile lookup failed with status-message ",
"\"", .profile_dl_status$message, "\""
))
}
}, error=function(..error){
..error_is_solvable_retry <- any(
stringr::str_detect(..error$message, "\\bTimeout was reached\\b"),
base::isTRUE(.profile_dl_status$status_code == 401)
)
if(..error_is_solvable_retry){
.profile_tbl <<- NULL
httr::handle_reset(.profile_url)
base::Sys.sleep(10)
}else{
.profile_tbl <<- base::simpleError(..error$message)
}
}, finally=function(...){
base::gc()
})
}
return(.profile_tbl)
}
################################################################################
# stock_profile_db <- read_rds("./data/stock_profile_db.Rds")
stock_profile_db <-
instrument_db %>%
filter(instrument_type == "CS") %>%
# slice_sample(n=2e2) %>%
mutate(profile=best_map(
str_c(mnemonic, ".F"), get_yahoo_profile, .workers=6, .scheduling=10
)) %>%
write_rds("./data/stock_profile_db.Rds")
################################################################################
stock_profile_db %>%
pluck("profile") %>%
discard(is.list) %>%
discard(is, "simpleError") %>%
compact()
stock_profile_db %>%
filter(map_lgl(profile, is, "simpleError")) %>%
mutate(error_message = map_chr(profile, "message")) %>%
count(error_message, sort=TRUE)
################################################################################
################################################################################
################################################################################
stock_profile <-
stock_profile_db %>%
select(mnemonic, profile) %>%
mutate(profile = map(profile, function(.profile){
if(!is(.profile, "list")){return(NULL)}
.profile <<- .profile
.profile_df <- imap_dfc(.profile, function(..values, ..name){
..values <<- ..values; ..name <<- ..name
if(nrow(..values) == 0){return(tibble(.rows=1))}
if(..name %in% c("name", "url", "address")){
..values <-
..values %>%
pluck("value", .default=character()) %>%
str_c(collapse=" | ") %>%
as_tibble_col(column_name=..name)
}else if(..name %in% c("info")){
..values <-
..values %>%
select(value) %>%
separate(col=value, into=c("name", "value"), remove=TRUE, sep=": ") %>%
mutate(across(where(is.character), str_remove, "\\(.*?\\)")) %>%
mutate(across(where(is.character), str_squish)) %>%
pivot_wider(names_from=name, values_from=value,
names_repair=janitor::make_clean_names)
}else if(..name %in% c("rest")){
..values <- as_tibble_col(list(..values), column_name=..name)
}else{
stop()
}
return(..values)
})
return(.profile_df)
}))
unnest_wider(stock_profile, profile)
base::setwd("~/Documents/websites/m-pilarski/")
usethis::proj_set(NULL)
################################################################################
site_proj_dir <- fs::path_expand("~/Documents/websites/m-pilarski/site")
base::setwd(site_proj_dir)
usethis::proj_set(site_proj_dir)
################################################################################
if(is(try(gitcreds::gitcreds_get()), "try-error")){
gitcreds::gitcreds_set()
}
gert::git_add(files=".", repo=site_proj_dir)
gert::git_commit(message=as.character(lubridate::now()), repo=site_proj_dir)
gert::git_push(repo=site_proj_dir)
usethis::proj_set(NULL)
system("firefox https://app.netlify.com/sites/moritz-pilarski-1/deploys")
.profile
base::setwd("~/Documents/websites/m-pilarski/")
usethis::proj_set(NULL)
################################################################################
site_proj_dir <- fs::path_expand("~/Documents/websites/m-pilarski/site")
base::setwd(site_proj_dir)
usethis::proj_set(site_proj_dir)
################################################################################
# blogdown::serve_site()
################################################################################
if(is(try(gitcreds::gitcreds_get()), "try-error")){
gitcreds::gitcreds_set()
}
gert::git_add(files=".", repo=site_proj_dir)
gert::git_commit(message=as.character(lubridate::now()), repo=site_proj_dir)
gert::git_push(repo=site_proj_dir)
usethis::proj_set(NULL)
system("firefox https://app.netlify.com/sites/moritz-pilarski-1/deploys")
