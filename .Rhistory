from telethon import TelegramClient, events, sync,
# These example values won't work. You must get your own api_id and
from telethon import TelegramClient, events, sync
# These example values won't work. You must get your own api_id and
# api_hash from https://my.telegram.org, under API Development.
api_id =  19072790
api_hash = 'd0e35d777566a548ea3a5b6b85721139'
client = TelegramClient('session_name', api_id, api_hash)
client.start()
print(client.get_me().stringify())
client.send_message('rackelhahn69', 'Hello! Talking to you from Telethon')
client.download_profile_photo('me')
channel_username="querdenken_621"
channel_username="querdenken_621"
channel_entity=client.get_entity(channel_username)
posts = client.get_messages(
channel_username,
limit=5000,
offset_date=None,
offset_id=0,
max_id=0,
min_id=0,
add_offset=0,
)
type(posts)
has_repl=[i for i in posts if i.replies is not None]
has_repl[0].id
type(has_repl[0].id)
async for message in client.iter_messages(channel_entity, reply_to=has_repl[0].id):
print(message.chat.title, message.text)
async for message in client.iter_messages(channel_entity, reply_to=has_repl[0].id):
print(message.chat.title, message.text)
client.iter_messages(channel_entity, reply_to=has_repl[0].id)
async for message in client.iter_messages(channel_entity, reply_to=has_repl[0].id):
print(message.chat.title, message.text)
for message in client.iter_messages(channel_entity, reply_to=has_repl[0].id):
print(message.chat.title, message.text)
for message in client.iter_messages(channel_entity, reply_to=has_repl[0].id):
print(message.chat.title, message.text)
has_repl[0].id)
has_repl[0].id
[print(message.text) for message in client.iter_messages(channel_entity, reply_to=2758)]
[print(message.text) for message in client.iter_messages(channel_entity, reply_to=has_repl[1].id)]
[print(message.text) for message in client.iter_messages(channel_entity, reply_to=has_repl[2].id)]
for message in has_repl:
for reply in client.iter_messages(channel_entity, reply_to=message.id):
print(message.chat.title, message.text)
type(posts)
for message in has_repl:
for reply in client.iter_messages(channel_entity, reply_to=message.id):
print(reply.chat.title, reply.text)
for message in has_repl:
for reply in client.iter_messages(channel_entity, reply_to=message.id):
print(reply.chat.title, ": ", reply.text)
replies=[]
reply
replies=[replies, reply]
replies
replies=[replies, reply]
replies
replies=[]
for message in posts if i.replies is not None:
for reply in client.iter_messages(channel_entity, reply_to=message.id):
replies.append(reply)
import asyncio
replies=[]
for message in posts if i.replies is not None:
replies=[]
for message in posts if i.replies is not None:
async for reply in client.iter_messages(channel_entity, reply_to=message.id):
replies.append(reply)
replies=[]
for message in posts if i.replies is not None:
async for reply in client.iter_messages(channel_entity, reply_to=message.id):
replies.append(reply)
replies=[]
for message in posts if i.replies is not None:
for reply in client.iter_messages(channel_entity, reply_to=message.id):
replies.append(reply)
replies
posts
replies=[]
replies
for message in posts if i.replies is not None:
for reply in client.iter_messages(channel_entity, reply_to=message.id):
replies.append(reply)
has_repl=[i for i in posts if i.replies is not None]
replies=[]
for message in has_repl:
for reply in client.iter_messages(channel_entity, reply_to=message.id):
replies.append(reply)
replies
replies[0].reply_to_msg_id
[i.reply_to_msg_id for i in replies]
sort([i.reply_to_msg_id for i in replies])
sorted([i.reply_to_msg_id for i in replies])
install.packages("blogdown")
requireNamespace("remotes")
site_proj_dir <- fs::dir_create(fs::path_wd("site"))
site_proj_dir <- fs::dir_create(fs::path_wd("site"))
site_proj_file <- fs::path(
site_proj_dir, fs::path_file(site_proj_dir), ext="Rproj"
)
site_proj_file
fs::file_exists(site_proj_file)
usethis::create_project(path=site_proj_dir, open=FALSE)
usethis::proj_set(site_proj_dir)
site_proj_dir <- fs::dir_create(fs::path_norm(
"~/Documents/websites/m-pilarski/site"
))
site_proj_dir
site_proj_file <- fs::path(
site_proj_dir, fs::path_file(site_proj_dir), ext="Rproj"
)
if(fs::file_exists(site_proj_file)){
usethis::create_project(path=site_proj_dir, open=FALSE)
}
usethis::proj_set(site_proj_dir)
usethis::proj_set(site_proj_file)
site_proj_dir <- fs::dir_create(fs::path_norm(
"~/Documents/websites/m-pilarski/site"
))
site_proj_file <- fs::path(
site_proj_dir, fs::path_file(site_proj_dir), ext="Rproj"
)
site_proj_file
fs::file_exists(site_proj_file)
if(fs::file_exists(site_proj_file)){
usethis::create_project(path=site_proj_dir, open=FALSE)
}
fs::file_exists(site_proj_file))
(fs::file_exists(site_proj_file))
if(fs::file_exists(site_proj_file)){
print("yes")
usethis::create_project(path=site_proj_dir, open=FALSE)
}
if(fs::file_exists(site_proj_file)[1]){
print("yes")
usethis::create_project(path=site_proj_dir, open=FALSE)
}
fs::file_exists(site_proj_file)[1]
if(!fs::file_exists(site_proj_file)){
print("yes")
usethis::create_project(path=site_proj_dir, open=FALSE)
}
usethis::proj_set(site_proj_file)
usethis::proj_set(site_proj_dir)
usethis::proj_get()
new_site(theme="wowchemy/starter-academic")
blogdown::new_site(theme="wowchemy/starter-academic")
setwd("~/Documents/websites/m-pilarski/")
usethis::proj_set(NULL)
site_proj_dir <- fs::dir_create(fs::dir_delete(fs::path_norm(
"~/Documents/websites/m-pilarski/site"
)))
site_proj_file <- fs::path(
site_proj_dir, fs::path_file(site_proj_dir), ext="Rproj"
)
usethis::create_project(path=site_proj_dir, open=FALSE)
usethis::proj_set(site_proj_dir)
# blogdown::install_theme("yihui/hugo-lithium")
blogdown::new_site(
dir=site_proj_dir,
theme="yihui/hugo-lithium",
# theme="adityatelange/hugo-PaperMod",
serve=TRUE,
force=TRUE
)
# blogdown::serve_site(.site_dir=site_proj_dir)
# gitcreds::gitcreds_set()
gh::gh("DELETE /repos/{owner}/{repo}", owner="m-pilarski",
repo="netlify_site_test")
new_repo <- gh::gh("POST /user/repos", name = "netlify_site_test")
gert::git_init(path=site_proj_dir)
gert::git_add(files=".", repo=site_proj_dir)
gert::git_commit(message=as.character(lubridate::now()), repo=site_proj_dir)
gert::git_remote_add("https://github.com/m-pilarski/netlify_site_test.git",
repo=site_proj_dir)
gert::git_branch_create("main", repo=site_proj_dir)
gert::git_push(repo=site_proj_dir)
# usethis::gh_token_help()
# gitcreds::gitcreds_set()
#
#
# usethis::use_git()
#
# if(!fs::dir_exists(fs::path(site_proj_dir, ".git"))){
#   system(stringr::str_c(
#     "cd ", site_proj_dir, "&& git init && ",
#     "git remote add origin https://github.com/m-pilarski/netlify_site_test.git"
#   ))
# }
#
# setup_github_cmd <- stringr::str_c(
#   "cd ", site_proj_dir, " && git add * && git commit -m 'update' && ",
#   "git branch -M main && git push -u origin main"
# )
#
# cat(setup_github_cmd)
# # system(stringr::str_c("gnome-terminal -- ", setup_github_cmd, ""))
blogdown::install_theme("yihui/hugo-lithium")
base::setwd("~/Documents/websites/m-pilarski/")
usethis::proj_set(NULL)
################################################################################
site_proj_dir <- fs::path_expand("~/Documents/websites/m-pilarski/site")
################################################################################
if(fs::dir_exists(site_proj_dir)){
fs::dir_delete(site_proj_dir); Sys.sleep(0.1)
}
fs::dir_create(site_proj_dir); Sys.sleep(0.1)
################################################################################
base::setwd(site_proj_dir)
usethis::create_project(path=site_proj_dir, open=FALSE)
usethis::proj_set(site_proj_dir)
################################################################################
if(is(try(gitcreds::gitcreds_get()), "try-error")){
gitcreds::gitcreds_set()
}
invisible(gh::gh(
"DELETE /repos/{owner}/{repo}", owner="m-pilarski", repo="netlify_site_test"
))
new_repo <- gh::gh(
"POST /user/repos", name="netlify_site_test"
)
################################################################################
gert::git_init(path=site_proj_dir)
gert::git_remote_add(new_repo$clone_url, repo=site_proj_dir)
gert::git_add(files=".", repo=site_proj_dir)
gert::git_commit("init")
readr::write_lines(
c(".DS_Store", "Thumbs.db", ".hugo_build.lock",
"/public/", "/resources/"),
fs::path(site_proj_dir, ".gitignore"), append=TRUE
)
blogdown::new_site(
dir=site_proj_dir,
# theme="adityatelange/hugo-PaperMod",
theme="wowchemy/starter-academic",
serve=TRUE,
force=TRUE
)
gert::git_branch_create("main", repo=site_proj_dir)
readr::write_lines(
c(".DS_Store", "Thumbs.db", ".hugo_build.lock",
"/public/", "/resources/"),
fs::path(site_proj_dir, ".gitignore"), append=TRUE
)
blogdown::new_site(
dir=site_proj_dir,
# theme="adityatelange/hugo-PaperMod",
theme="wowchemy/starter-academic",
serve=TRUE,
force=TRUE
)
blogdown::check_site()
blogdown::new_post(title="test 1")
# blogdown::check_netlify()
blogdown::stop_server()
blogdown::serve_site(.site_dir=site_proj_dir)
gert::git_add(files=".", repo=site_proj_dir)
gert::git_commit(message=as.character(lubridate::now()), repo=site_proj_dir)
gert::git_push(repo=site_proj_dir)
usethis::proj_set(NULL)
system("firefox https://moritz-pilarski-1.netlify.app/")
base::setwd("~/Documents/websites/m-pilarski/")
usethis::proj_set(NULL)
base::setwd(site_proj_dir)
usethis::create_project(path=site_proj_dir, open=FALSE)
usethis::proj_set(site_proj_dir)
gert::git_add(files=".", repo=site_proj_dir)
gert::git_add(files=".", repo=site_proj_dir)
gert::git_commit(message=as.character(lubridate::now()), repo=site_proj_dir)
gert::git_push(repo=site_proj_dir)
# blogdown::check_netlify()
blogdown::stop_server()
blogdown::serve_site(.site_dir=site_proj_dir)
gert::git_add(files=".", repo=site_proj_dir)
gert::git_commit(message=as.character(lubridate::now()), repo=site_proj_dir)
gert::git_push(repo=site_proj_dir)
# blogdown::check_netlify()
blogdown::stop_server()
blogdown::serve_site(.site_dir=site_proj_dir)
gert::git_add(files=".", repo=site_proj_dir)
gert::git_commit(message=as.character(lubridate::now()), repo=site_proj_dir)
gert::git_push(repo=site_proj_dir)
gert::git_add(files=".", repo=site_proj_dir)
gert::git_commit(message=as.character(lubridate::now()), repo=site_proj_dir)
gert::git_push(repo=site_proj_dir)
gert::git_add(files=".", repo=site_proj_dir)
gert::git_commit(message=as.character(lubridate::now()), repo=site_proj_dir)
gert::git_push(repo=site_proj_dir)
gert::git_add(files=".", repo=site_proj_dir)
gert::git_commit(message=as.character(lubridate::now()), repo=site_proj_dir)
gert::git_push(repo=site_proj_dir)
# blogdown::check_netlify()
blogdown::stop_server()
blogdown::serve_site(.site_dir=site_proj_dir)
gert::git_add(files=".", repo=site_proj_dir)
gert::git_commit(message=as.character(lubridate::now()), repo=site_proj_dir)
gert::git_push(repo=site_proj_dir)
if(is(try(gitcreds::gitcreds_get()), "try-error")){
gitcreds::gitcreds_set()
}
gert::git_add(files=".", repo=site_proj_dir)
gert::git_commit(message=as.character(lubridate::now()), repo=site_proj_dir)
gert::git_push(repo=site_proj_dir)
